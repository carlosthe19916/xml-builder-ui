{"version":3,"sources":["logo.png","Pages/NotFoundPage/index.tsx","Pages/NotFoundPage/NotFoundPage.tsx","Routes.tsx","Pages/WelcomePage/WelcomePage.tsx","Layout/BasicLayout/index.tsx","Layout/BasicLayout/BasicLayout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NotFoundPage","Fragment","routes","path","component","PageSection","Bullseye","EmptyState","variant","EmptyStateVariant","full","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","size","EmptyStateBody","Button","sidebarLabel","AppRoutes","map","idx","key","BasicLayout","renderHeader","PageToolbar","Toolbar","ToolbarGroup","className","css","accessibleStyles","screenReader","visibleOnLg","ToolbarItem","id","aria-label","ButtonVariant","plain","PageHeader","logo","Brand","src","imgBrand","alt","toolbar","showNavToggle","renderSidebar","sidebar","props","PageNav","Nav","theme","NavList","NavVariants","default","route","NavItem","exact","to","activeClassName","PageSidebar","nav","renderPageSkipToContent","SkipToContent","href","children","this","Page","header","isManagedSidebar","skipToContent","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,uQCE5BC,ECAgB,WAC7B,OACE,kBAAC,IAAMC,SAAP,KACE,+CCQOC,EAAsB,CACjC,CACEC,KAAM,IACNC,UCH0B,WAC5B,OACE,kBAAC,IAAMH,SAAP,KACE,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAASC,IAAkBC,MACrC,kBAACC,EAAA,EAAD,CAAgBC,KAAMC,MACtB,kBAACC,EAAA,EAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,cAGA,kBAACC,EAAA,EAAD,sGAIA,kBAACC,EAAA,EAAD,CAAQV,QAAQ,WAAhB,yBDVRW,aAAc,eAILC,EAAY,WACvB,OACE,kBAAC,IAAD,KACGlB,EAAOmB,KAAI,WAAsBC,GAAtB,IAAGnB,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAT,OACV,kBAAC,IAAD,CAAOD,KAAMA,EAAMC,UAAWA,EAAWmB,IAAKD,OAEhD,kBAAC,IAAD,CAAOlB,UAAWJ,M,wLEzBTwB,E,2MC6BbC,aAAe,WACb,IAAMC,EACJ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWC,YACTC,IAAiBC,aACjBD,IAAiBE,cAGnB,kBAACC,EAAA,EAAD,KACE,kBAAChB,EAAA,EAAD,CACEiB,GAAG,wBACHC,aAAW,wBACX5B,QAAS6B,IAAcC,OAEvB,kBAAC,IAAD,UAOV,OACE,kBAACC,EAAA,EAAD,CACEC,KACE,kBAAC,IAAMvC,SAAP,KACE,kBAACwC,EAAA,EAAD,CAAOC,IAAKC,IAAUC,IAAI,oBAC1B,kDAGJC,QAASnB,EACToB,eAAa,K,EAKnBC,cAAgB,WAAO,IACbC,EAAY,EAAKC,MAAjBD,QAEFE,EACJ,kBAACC,EAAA,EAAD,CAAKhB,GAAG,qBAAqBC,aAAW,MAAMgB,MAAM,QAClD,kBAACC,EAAA,EAAD,CAASlB,GAAG,kBAAkB3B,QAAS8C,IAAYC,SAChDP,EAAQ3B,KACP,SAACmC,EAAkBlC,GAAnB,OACEkC,EAAMrC,cACJ,kBAACsC,EAAA,EAAD,CACElC,IAAG,UAAKiC,EAAMrC,aAAX,YAA2BG,GAC9Ba,GAAE,UAAKqB,EAAMrC,aAAX,YAA2BG,IAE7B,kBAAC,IAAD,CAASoC,OAAK,EAACC,GAAIH,EAAMrD,KAAMyD,gBAAgB,gBAC5CJ,EAAMrC,oBASvB,OAAO,kBAAC0C,EAAA,EAAD,CAAaC,IAAKZ,EAASE,MAAM,U,EAG1CW,wBAA0B,WACxB,OACE,kBAACC,EAAA,EAAD,CAAeC,KAAK,0BAApB,oB,wEAMM,IACAC,EAAaC,KAAKlB,MAAlBiB,SAER,OACE,kBAAC,IAAMjE,SAAP,KACE,kBAACmE,EAAA,EAAD,CACEC,OAAQF,KAAK1C,eACbuB,QAASmB,KAAKpB,gBACduB,kBAAgB,EAChBC,cAAeJ,KAAKJ,2BAEnBG,Q,GAlFeM,IAAMC,WCVjBC,G,YAZO,WACpB,OACE,kBAAC,IAAMzE,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAa+C,QAAS9C,GACpB,kBAAC,EAAD,WCDUyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fb3a5f41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b4f3b1c.png\";","import NotFoundPage from './NotFoundPage';\n\nexport default NotFoundPage;\n","import React from \"react\";\n\nconst NotFoundPage: React.FC = () => {\n  return (\n    <React.Fragment>\n      <p>Not Found page</p>\n    </React.Fragment>\n  );\n};\n\nexport default NotFoundPage;\n","import React from \"react\";\nimport { Route, RouteComponentProps, Switch } from \"react-router-dom\";\nimport WelcomePage from \"./Pages/WelcomePage\";\nimport NotFoundPage from \"./Pages/NotFoundPage\";\n\nexport interface IAppRoute {\n  path: string;\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n  sidebarLabel?: string;\n}\n\nexport const routes: IAppRoute[] = [\n  {\n    path: \"/\",\n    component: WelcomePage,\n    sidebarLabel: \"Bienvenido\"\n  }\n];\n\nexport const AppRoutes = () => {\n  return (\n    <Switch>\n      {routes.map(({ path, component }, idx) => (\n        <Route path={path} component={component} key={idx} />\n      ))}\n      <Route component={NotFoundPage} />\n    </Switch>\n  );\n};\n","import React from \"react\";\nimport {\n  PageSection,\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Button,\n  Bullseye\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\n\nconst WelcomePage: React.FC = () => {\n  return (\n    <React.Fragment>\n      <PageSection>\n        <Bullseye>\n          <EmptyState variant={EmptyStateVariant.full}>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Bienvenido\n            </Title>\n            <EmptyStateBody>\n              Ac치 podras encontrar demostraciones b치sicas de como crear\n              comprobantes electr칩nicos.\n            </EmptyStateBody>\n            <Button variant=\"primary\">Documentaci칩n</Button>\n          </EmptyState>\n        </Bullseye>\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nexport default WelcomePage;\n","import BasicLayout from './BasicLayout';\n\nexport default BasicLayout;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport {\n  Page,\n  PageSidebar,\n  Nav,\n  NavList,\n  NavItem,\n  NavVariants,\n  PageHeader,\n  Brand,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  Button,\n  ButtonVariant,\n  SkipToContent\n} from \"@patternfly/react-core\";\nimport { css } from \"@patternfly/react-styles\";\nimport accessibleStyles from \"@patternfly/react-styles/css/utilities/Accessibility/accessibility\";\nimport { HelpIcon } from \"@patternfly/react-icons\";\nimport { IAppRoute } from \"../../Routes\";\nimport imgBrand from \"../../logo.png\";\n\ninterface Props {\n  sidebar: IAppRoute[];\n}\n\ninterface State {}\n\nclass BasicLayout extends React.Component<Props, State> {\n  renderHeader = () => {\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup\n          className={css(\n            accessibleStyles.screenReader,\n            accessibleStyles.visibleOnLg\n          )}\n        >\n          <ToolbarItem>\n            <Button\n              id=\"simple-example-uid-01\"\n              aria-label=\"Notifications actions\"\n              variant={ButtonVariant.plain}\n            >\n              <HelpIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n\n    return (\n      <PageHeader\n        logo={\n          <React.Fragment>\n            <Brand src={imgBrand} alt=\"Project OpenUBL\" />\n            <span>PROJECT OPENUBL</span>\n          </React.Fragment>\n        }\n        toolbar={PageToolbar}\n        showNavToggle\n      />\n    );\n  };\n\n  renderSidebar = () => {\n    const { sidebar } = this.props;\n\n    const PageNav = (\n      <Nav id=\"nav-primary-simple\" aria-label=\"Nav\" theme=\"dark\">\n        <NavList id=\"nav-list-simple\" variant={NavVariants.default}>\n          {sidebar.map(\n            (route: IAppRoute, idx: number) =>\n              route.sidebarLabel && (\n                <NavItem\n                  key={`${route.sidebarLabel}-${idx}`}\n                  id={`${route.sidebarLabel}-${idx}`}\n                >\n                  <NavLink exact to={route.path} activeClassName=\"pf-m-current\">\n                    {route.sidebarLabel}\n                  </NavLink>\n                </NavItem>\n              )\n          )}\n        </NavList>\n      </Nav>\n    );\n\n    return <PageSidebar nav={PageNav} theme=\"dark\" />;\n  };\n\n  renderPageSkipToContent = () => {\n    return (\n      <SkipToContent href=\"#primary-app-container\">\n        Skip to Content\n      </SkipToContent>\n    );\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <React.Fragment>\n        <Page\n          header={this.renderHeader()}\n          sidebar={this.renderSidebar()}\n          isManagedSidebar\n          skipToContent={this.renderPageSkipToContent()}\n        >\n          {children}\n        </Page>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BasicLayout;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { AppRoutes, routes } from \"./Routes\";\nimport BasicLayout from \"./Layout/BasicLayout\";\n\nimport \"./App.css\";\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <BasicLayout sidebar={routes}>\n          <AppRoutes />\n        </BasicLayout>\n      </BrowserRouter>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}